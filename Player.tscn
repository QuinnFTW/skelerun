[gd_scene load_steps=5 format=2]

[ext_resource path="res://PlayerAnimation.tscn" type="PackedScene" id=1]
[ext_resource path="res://SFX/hurt(ca-RUNCH).wav" type="AudioStream" id=2]
[ext_resource path="res://SFX/jump2.wav" type="AudioStream" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

var motion = Vector2(0,0)
var time_out = false
var stun_time_out = false
var hurt = false
var invincible = false
var override = false
var is_being_pushed = false
var push_dir = 0
var is_frozen = false
var bone_scene = load(\"res://Bone.tscn\")
var explosion_speed = 6000
var score_penalty = 10 #penalty to the score for being hit
var bombs = 2

signal animate

const SPEED = 1200
const JUMP_SPEED = -3800
const GRAVITY = 4000
const ACCELERATION = 0.25
const FRICTION = 0.1
const UP = Vector2 (0, -1)
const WORLD_LIMIT = 3000
const BOOST_MULTIPLIER = 1.5
const HURT_JUMP = 2000

func _ready():
	add_to_group(\"Player\")
	get_tree().call_group(\"UI\", \"update_bombs\", bombs)

func _physics_process(_delta):
	apply_gravity(_delta)
	move_and_slide(motion, UP)
	move()
	jump()
	drop()
	animate()
	push(push_dir)
	
#func _process(delta):
#	if get_owner() != null:
#
#		if time_out and hurt:
#			yield(get_tree(), \"idle_frame\") 
#			self.modulate.a = 0.5
#			yield(get_tree(), \"idle_frame\") 
#			self.modulate.a = 1.0
	
	if not time_out and stun_time_out:
		invincible = true
	else:
		invincible = false
	
	
func apply_gravity(_delta):
	if position.y > WORLD_LIMIT:
		get_tree().call_group(\"Gamestate\", \"end_game\")
	if is_on_floor() and motion.y > 0 and not Input.is_action_pressed(\"jump\"):
		motion.y = 0
	elif is_on_ceiling():
		motion.y = 1
	else:
		motion.y += GRAVITY * _delta * 2.5
		
func move():
	if stun_time_out == true:
		motion.x = lerp(motion.x, push_dir, FRICTION * 10)
		#motion.x = push_dir
	elif Input.is_action_pressed(\"left\") and not Input.is_action_pressed(\"right\") and not is_frozen:
		motion.x = lerp(motion.x, -SPEED + push_dir, ACCELERATION)
		#motion.x = -SPEED + push_dir
	elif Input.is_action_pressed(\"right\") and not Input.is_action_pressed(\"left\") and not is_frozen:
		motion.x = lerp(motion.x, SPEED + push_dir, ACCELERATION)
		#motion.x = SPEED + push_dir
	elif not is_being_pushed:
		if motion.x > 100 or motion.x < -100:
			motion.x = lerp(motion.x, push_dir, FRICTION)
		else:
			motion.x = 0
	
func animate():
	emit_signal(\"animate\", motion, hurt, stun_time_out)

func jump():
	if Input.is_action_just_pressed(\"jump\") and is_on_floor() and not stun_time_out and not is_frozen:
		motion.y = JUMP_SPEED
		$JumpSFX.play()
	
func hurt():
	if not time_out:
		#bypass regular movement commands by moving the player off the ground, waiting a frame, and then executing
		motion.y = 0
		position.y -= 1
		yield(get_tree(), \"idle_frame\") 
#		motion.y -= HURT_JUMP
		for i in range(7):
			bone_explosion()
		get_tree().call_group(\"Camera\", \"start\")
		$HurtSFX.play()
		$Timer.start()
		GlobalVars.score -= score_penalty
		$StunTimer.start()
		stun_time_out = true
		time_out = true
		hurt = true
		
	
func boost():
	position.y -= 1
	yield(get_tree(), \"idle_frame\")
	motion.y -= JUMP_SPEED * BOOST_MULTIPLIER
	
func start_push(is_pushing, push_direction):
	is_being_pushed = is_pushing
	push_dir = push_direction
	
func push(direction):
		motion.x += direction / 10
	
func _on_Timer_timeout():
	time_out = false
	hurt = false
	
	
func _on_StunTimer_timeout():
	stun_time_out = false
	
func drop():
	if Input.is_action_pressed(\"down\") and Input.is_action_just_pressed(\"special\"):
		self.position = Vector2(self.position.x, self.position.y + 5)
		
func freeze():
	is_frozen = true
	
func unfreeze():
	is_frozen = false
	
func bone_explosion():
	var bone = bone_scene.instance()
	get_parent().add_child(bone)
	bone.position = position
	randomize()
	bone.rotation_degrees = rand_range(0, 360)
	bone.apply_impulse(Vector2(), Vector2(explosion_speed, 0).rotated(bone.rotation_degrees))

func add_bomb():
	bombs += 1
	get_tree().call_group(\"UI\", \"update_bombs\", bombs)
	
func _input(ev):
    if ev.is_action_pressed(\"bomb\"):
        bomb_blast()
	
func bomb_blast():
	if bombs >= 1:
		get_tree().call_group(\"DeathWall\", \"reset_position\")
		get_tree().call_group(\"Camera\", \"start\")
		bombs -= 1
		get_tree().call_group(\"UI\", \"update_bombs\", bombs)


"

[node name="Player" type="KinematicBody2D" groups=[
"Player",
]]
position = Vector2( 508.096, 389.244 )
collision_mask = 78
script = SubResource( 1 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
polygon = PoolVector2Array( -36.4359, 188.185, 30.8668, 188.185, 87.0405, 63.6913, 90.7863, -123.597, 1.63696, -184.279, -102.495, -123.597, -105.492, 54.7014 )

[node name="PlayerAnimation" parent="." instance=ExtResource( 1 )]

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2( 3, 3 )
limit_smoothed = true
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = true

[node name="JumpSFX" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )
volume_db = -3.0

[node name="HurtSFX" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 2 )
volume_db = -3.029

[node name="Timer" type="Timer" parent="."]
wait_time = 2.5

[node name="StunTimer" type="Timer" parent="."]
[connection signal="animate" from="." to="PlayerAnimation" method="_on_Player_animate"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="timeout" from="StunTimer" to="." method="_on_StunTimer_timeout"]
